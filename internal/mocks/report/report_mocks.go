// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/report/generator.go

// Package mock_report is a generated GoMock package.
package mock_report

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entity "gitlab.ozon.dev/mary.kalina/telegram-bot/internal/model/messages/entity"
)

// MockexchangeRateRepository is a mock of exchangeRateRepository interface.
type MockexchangeRateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockexchangeRateRepositoryMockRecorder
}

// MockexchangeRateRepositoryMockRecorder is the mock recorder for MockexchangeRateRepository.
type MockexchangeRateRepositoryMockRecorder struct {
	mock *MockexchangeRateRepository
}

// NewMockexchangeRateRepository creates a new mock instance.
func NewMockexchangeRateRepository(ctrl *gomock.Controller) *MockexchangeRateRepository {
	mock := &MockexchangeRateRepository{ctrl: ctrl}
	mock.recorder = &MockexchangeRateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexchangeRateRepository) EXPECT() *MockexchangeRateRepositoryMockRecorder {
	return m.recorder
}

// GetRate mocks base method.
func (m *MockexchangeRateRepository) GetRate(ctx context.Context, code string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate", ctx, code)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate.
func (mr *MockexchangeRateRepositoryMockRecorder) GetRate(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockexchangeRateRepository)(nil).GetRate), ctx, code)
}

// MockexpenseRepository is a mock of expenseRepository interface.
type MockexpenseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockexpenseRepositoryMockRecorder
}

// MockexpenseRepositoryMockRecorder is the mock recorder for MockexpenseRepository.
type MockexpenseRepositoryMockRecorder struct {
	mock *MockexpenseRepository
}

// NewMockexpenseRepository creates a new mock instance.
func NewMockexpenseRepository(ctrl *gomock.Controller) *MockexpenseRepository {
	mock := &MockexpenseRepository{ctrl: ctrl}
	mock.recorder = &MockexpenseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexpenseRepository) EXPECT() *MockexpenseRepositoryMockRecorder {
	return m.recorder
}

// Report mocks base method.
func (m *MockexpenseRepository) Report(ctx context.Context, userID int64, period time.Time) ([]*entity.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report", ctx, userID, period)
	ret0, _ := ret[0].([]*entity.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Report indicates an expected call of Report.
func (mr *MockexpenseRepositoryMockRecorder) Report(ctx, userID, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockexpenseRepository)(nil).Report), ctx, userID, period)
}

// MocktxManager is a mock of txManager interface.
type MocktxManager struct {
	ctrl     *gomock.Controller
	recorder *MocktxManagerMockRecorder
}

// MocktxManagerMockRecorder is the mock recorder for MocktxManager.
type MocktxManagerMockRecorder struct {
	mock *MocktxManager
}

// NewMocktxManager creates a new mock instance.
func NewMocktxManager(ctrl *gomock.Controller) *MocktxManager {
	mock := &MocktxManager{ctrl: ctrl}
	mock.recorder = &MocktxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktxManager) EXPECT() *MocktxManagerMockRecorder {
	return m.recorder
}

// WithinTransaction mocks base method.
func (m *MocktxManager) WithinTransaction(arg0 context.Context, arg1 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithinTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithinTransaction indicates an expected call of WithinTransaction.
func (mr *MocktxManagerMockRecorder) WithinTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithinTransaction", reflect.TypeOf((*MocktxManager)(nil).WithinTransaction), arg0, arg1)
}
