// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/messages/incoming_msg.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "gitlab.ozon.dev/mary.kalina/telegram-bot/internal/model/messages/entity"
)

// MockmessageSender is a mock of messageSender interface.
type MockmessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockmessageSenderMockRecorder
}

// MockmessageSenderMockRecorder is the mock recorder for MockmessageSender.
type MockmessageSenderMockRecorder struct {
	mock *MockmessageSender
}

// NewMockmessageSender creates a new mock instance.
func NewMockmessageSender(ctrl *gomock.Controller) *MockmessageSender {
	mock := &MockmessageSender{ctrl: ctrl}
	mock.recorder = &MockmessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageSender) EXPECT() *MockmessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockmessageSender) SendMessage(text string, cases []string, userID int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", text, cases, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockmessageSenderMockRecorder) SendMessage(text, cases, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockmessageSender)(nil).SendMessage), text, cases, userID)
}

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// NewExpense mocks base method.
func (m *Mockrepository) NewExpense(userID int64, category string, amount uint64, date int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewExpense", userID, category, amount, date)
}

// NewExpense indicates an expected call of NewExpense.
func (mr *MockrepositoryMockRecorder) NewExpense(userID, category, amount, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewExpense", reflect.TypeOf((*Mockrepository)(nil).NewExpense), userID, category, amount, date)
}

// NewReport mocks base method.
func (m *Mockrepository) NewReport(userID, period int64) []*entity.Report {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReport", userID, period)
	ret0, _ := ret[0].([]*entity.Report)
	return ret0
}

// NewReport indicates an expected call of NewReport.
func (mr *MockrepositoryMockRecorder) NewReport(userID, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReport", reflect.TypeOf((*Mockrepository)(nil).NewReport), userID, period)
}

// SetCurrency mocks base method.
func (m *Mockrepository) SetCurrency(userID int64, currency string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrency", userID, currency)
}

// SetCurrency indicates an expected call of SetCurrency.
func (mr *MockrepositoryMockRecorder) SetCurrency(userID, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrency", reflect.TypeOf((*Mockrepository)(nil).SetCurrency), userID, currency)
}
