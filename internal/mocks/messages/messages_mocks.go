// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/messages/incoming_msg.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entity "gitlab.ozon.dev/mary.kalina/telegram-bot/internal/model/messages/entity"
)

// MockexchangeRateRepository is a mock of exchangeRateRepository interface.
type MockexchangeRateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockexchangeRateRepositoryMockRecorder
}

// MockexchangeRateRepositoryMockRecorder is the mock recorder for MockexchangeRateRepository.
type MockexchangeRateRepositoryMockRecorder struct {
	mock *MockexchangeRateRepository
}

// NewMockexchangeRateRepository creates a new mock instance.
func NewMockexchangeRateRepository(ctrl *gomock.Controller) *MockexchangeRateRepository {
	mock := &MockexchangeRateRepository{ctrl: ctrl}
	mock.recorder = &MockexchangeRateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexchangeRateRepository) EXPECT() *MockexchangeRateRepositoryMockRecorder {
	return m.recorder
}

// GetRate mocks base method.
func (m *MockexchangeRateRepository) GetRate(ctx context.Context, code string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate", ctx, code)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate.
func (mr *MockexchangeRateRepositoryMockRecorder) GetRate(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockexchangeRateRepository)(nil).GetRate), ctx, code)
}

// MockExpenseRepository is a mock of ExpenseRepository interface.
type MockExpenseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseRepositoryMockRecorder
}

// MockExpenseRepositoryMockRecorder is the mock recorder for MockExpenseRepository.
type MockExpenseRepositoryMockRecorder struct {
	mock *MockExpenseRepository
}

// NewMockExpenseRepository creates a new mock instance.
func NewMockExpenseRepository(ctrl *gomock.Controller) *MockExpenseRepository {
	mock := &MockExpenseRepository{ctrl: ctrl}
	mock.recorder = &MockExpenseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseRepository) EXPECT() *MockExpenseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExpenseRepository) Create(ctx context.Context, userID int64, category string, amount uint64, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, category, amount, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockExpenseRepositoryMockRecorder) Create(ctx, userID, category, amount, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExpenseRepository)(nil).Create), ctx, userID, category, amount, date)
}

// GetAmountByPeriod mocks base method.
func (m *MockExpenseRepository) GetAmountByPeriod(ctx context.Context, userID int64, period time.Time) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAmountByPeriod", ctx, userID, period)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAmountByPeriod indicates an expected call of GetAmountByPeriod.
func (mr *MockExpenseRepositoryMockRecorder) GetAmountByPeriod(ctx, userID, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAmountByPeriod", reflect.TypeOf((*MockExpenseRepository)(nil).GetAmountByPeriod), ctx, userID, period)
}

// Report mocks base method.
func (m *MockExpenseRepository) Report(ctx context.Context, userID int64, period time.Time) ([]*entity.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report", ctx, userID, period)
	ret0, _ := ret[0].([]*entity.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Report indicates an expected call of Report.
func (mr *MockExpenseRepositoryMockRecorder) Report(ctx, userID, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockExpenseRepository)(nil).Report), ctx, userID, period)
}

// MockuserRepository is a mock of userRepository interface.
type MockuserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepositoryMockRecorder
}

// MockuserRepositoryMockRecorder is the mock recorder for MockuserRepository.
type MockuserRepositoryMockRecorder struct {
	mock *MockuserRepository
}

// NewMockuserRepository creates a new mock instance.
func NewMockuserRepository(ctrl *gomock.Controller) *MockuserRepository {
	mock := &MockuserRepository{ctrl: ctrl}
	mock.recorder = &MockuserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepository) EXPECT() *MockuserRepositoryMockRecorder {
	return m.recorder
}

// DelLimit mocks base method.
func (m *MockuserRepository) DelLimit(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelLimit", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelLimit indicates an expected call of DelLimit.
func (mr *MockuserRepositoryMockRecorder) DelLimit(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelLimit", reflect.TypeOf((*MockuserRepository)(nil).DelLimit), ctx, userID)
}

// GetUser mocks base method.
func (m *MockuserRepository) GetUser(ctx context.Context, userID int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockuserRepositoryMockRecorder) GetUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockuserRepository)(nil).GetUser), ctx, userID)
}

// SetCurrency mocks base method.
func (m *MockuserRepository) SetCurrency(ctx context.Context, userID int64, currency string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrency", ctx, userID, currency)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrency indicates an expected call of SetCurrency.
func (mr *MockuserRepositoryMockRecorder) SetCurrency(ctx, userID, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrency", reflect.TypeOf((*MockuserRepository)(nil).SetCurrency), ctx, userID, currency)
}

// SetLimit mocks base method.
func (m *MockuserRepository) SetLimit(ctx context.Context, userID int64, limit uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLimit", ctx, userID, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLimit indicates an expected call of SetLimit.
func (mr *MockuserRepositoryMockRecorder) SetLimit(ctx, userID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLimit", reflect.TypeOf((*MockuserRepository)(nil).SetLimit), ctx, userID, limit)
}

// MocktxManager is a mock of txManager interface.
type MocktxManager struct {
	ctrl     *gomock.Controller
	recorder *MocktxManagerMockRecorder
}

// MocktxManagerMockRecorder is the mock recorder for MocktxManager.
type MocktxManagerMockRecorder struct {
	mock *MocktxManager
}

// NewMocktxManager creates a new mock instance.
func NewMocktxManager(ctrl *gomock.Controller) *MocktxManager {
	mock := &MocktxManager{ctrl: ctrl}
	mock.recorder = &MocktxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktxManager) EXPECT() *MocktxManagerMockRecorder {
	return m.recorder
}

// WithinTransaction mocks base method.
func (m *MocktxManager) WithinTransaction(arg0 context.Context, arg1 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithinTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithinTransaction indicates an expected call of WithinTransaction.
func (mr *MocktxManagerMockRecorder) WithinTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithinTransaction", reflect.TypeOf((*MocktxManager)(nil).WithinTransaction), arg0, arg1)
}

// MockreportProducer is a mock of reportProducer interface.
type MockreportProducer struct {
	ctrl     *gomock.Controller
	recorder *MockreportProducerMockRecorder
}

// MockreportProducerMockRecorder is the mock recorder for MockreportProducer.
type MockreportProducerMockRecorder struct {
	mock *MockreportProducer
}

// NewMockreportProducer creates a new mock instance.
func NewMockreportProducer(ctrl *gomock.Controller) *MockreportProducer {
	mock := &MockreportProducer{ctrl: ctrl}
	mock.recorder = &MockreportProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockreportProducer) EXPECT() *MockreportProducerMockRecorder {
	return m.recorder
}

// SendReportMessage mocks base method.
func (m *MockreportProducer) SendReportMessage(userID int64, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendReportMessage", userID, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendReportMessage indicates an expected call of SendReportMessage.
func (mr *MockreportProducerMockRecorder) SendReportMessage(userID, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReportMessage", reflect.TypeOf((*MockreportProducer)(nil).SendReportMessage), userID, msg)
}

// MockmessageSender is a mock of messageSender interface.
type MockmessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockmessageSenderMockRecorder
}

// MockmessageSenderMockRecorder is the mock recorder for MockmessageSender.
type MockmessageSenderMockRecorder struct {
	mock *MockmessageSender
}

// NewMockmessageSender creates a new mock instance.
func NewMockmessageSender(ctrl *gomock.Controller) *MockmessageSender {
	mock := &MockmessageSender{ctrl: ctrl}
	mock.recorder = &MockmessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageSender) EXPECT() *MockmessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockmessageSender) SendMessage(text string, cases []string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", text, cases, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockmessageSenderMockRecorder) SendMessage(text, cases, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockmessageSender)(nil).SendMessage), text, cases, userID)
}
