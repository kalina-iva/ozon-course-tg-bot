// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/cache/expense.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockcacheManager is a mock of cacheManager interface.
type MockcacheManager struct {
	ctrl     *gomock.Controller
	recorder *MockcacheManagerMockRecorder
}

// MockcacheManagerMockRecorder is the mock recorder for MockcacheManager.
type MockcacheManagerMockRecorder struct {
	mock *MockcacheManager
}

// NewMockcacheManager creates a new mock instance.
func NewMockcacheManager(ctrl *gomock.Controller) *MockcacheManager {
	mock := &MockcacheManager{ctrl: ctrl}
	mock.recorder = &MockcacheManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcacheManager) EXPECT() *MockcacheManagerMockRecorder {
	return m.recorder
}

// GetBytes mocks base method.
func (m *MockcacheManager) GetBytes(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytes", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBytes indicates an expected call of GetBytes.
func (mr *MockcacheManagerMockRecorder) GetBytes(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytes", reflect.TypeOf((*MockcacheManager)(nil).GetBytes), ctx, key)
}

// Invalidate mocks base method.
func (m *MockcacheManager) Invalidate(ctx context.Context, tags []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Invalidate", ctx, tags)
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockcacheManagerMockRecorder) Invalidate(ctx, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockcacheManager)(nil).Invalidate), ctx, tags)
}

// Set mocks base method.
func (m *MockcacheManager) Set(ctx context.Context, key string, value interface{}, tags []string, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, tags, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockcacheManagerMockRecorder) Set(ctx, key, value, tags, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockcacheManager)(nil).Set), ctx, key, value, tags, expiration)
}
